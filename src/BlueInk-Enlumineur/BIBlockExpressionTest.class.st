Class {
	#name : #BIBlockExpressionTest,
	#superclass : #BISingleExpressionTest,
	#category : #'BlueInk-Enlumineur'
}

{ #category : #acccessing }
BIBlockExpressionTest >> closeBracket [
	^']'
]

{ #category : #configurations }
BIBlockExpressionTest >> lineUpBlockBracketsConfiguration [
	"Here we can control explicitely the configuration we want."

	" String streamContents: [:s |
			BIPrettyPrinterContext new storeOn: s]"

	^ self contextClass new
		lineUpBlockBrackets: true
]

{ #category : #acccessing }
BIBlockExpressionTest >> openBracket [
	^ '['
]

{ #category : #acccessing }
BIBlockExpressionTest >> parser [
	^ RBParser
]

{ #category : #configurations }
BIBlockExpressionTest >> periodAtEndConfiguration [
	"Here we can control explicitely the configuration we want."

	" String streamContents: [:s |
			BIPrettyPrinterContext new storeOn: s]"

	^ self contextClass new
		periodsAtEndOfBlock: true
]

{ #category : #test }
BIBlockExpressionTest >> testArgumentIsFormated [
	self validate: ':i|i' isFormattedAs: ' :i | i ' 
]

{ #category : #test }
BIBlockExpressionTest >> testArgumentsAreFormated [
	| expr source |
	
	self validate:':i :j| i '
	isFormattedAs:' :i :j | i '.
]

{ #category : #test }
BIBlockExpressionTest >> testArgumentsComments [
	| expr source |
	
	self validate:':i "aComment" :j "anotherComment"| i '
	isFormattedAs:
' :i"aComment"
 :j"anotherComment"
 | i '
]

{ #category : #test }
BIBlockExpressionTest >> testBodyFormat [

	self validate:' [1]. [ a:=1] '
	isFormattedAs:
' [ 1 ].
[ a := 1 ] '.
]

{ #category : #test }
BIBlockExpressionTest >> testEndPeriodInside [
	| expr source |
	
	self validate:'2.'
	isFormattedAs:' 2. '
	with: #periodAtEndConfiguration
]

{ #category : #test }
BIBlockExpressionTest >> testMultiline [

	self validate: '1+3. 6 factorial '
	isFormattedAs: 
' 1 + 3.
6 factorial '
]

{ #category : #test }
BIBlockExpressionTest >> testNewLineAfterComment [
	
	self validate: '"aComment"1. 2'
	isFormattedAs: 
' "aComment"
1.
2 '
]

{ #category : #test }
BIBlockExpressionTest >> testNewLineBeforeEndBrackets [

	self validate:'3. 4'  
	isFormattedAs:
' 3.
4
'  with: #lineUpBlockBracketsConfiguration.
]

{ #category : #test }
BIBlockExpressionTest >> testNoEndPeriodInside [
	self validate: '2.' isFormattedAs: ' 2 '
]

{ #category : #test }
BIBlockExpressionTest >> testNoExtraSpaceAroundBlock [

	| expr source |
	expr := self parser parseExpression: '   ',self openBracket ,'2',self closeBracket,'   '.
	configurationSelector := #emptyDefaultConfiguration.
	source := self formatter format: expr.
	self assert: source equals: self openBracket,' 2 ',self closeBracket
]

{ #category : #test }
BIBlockExpressionTest >> testNoExtraSpaceInside [

	self validate: '    2     ' isFormattedAs: ' 2 '
]

{ #category : #test }
BIBlockExpressionTest >> testNoNewLineBeforeEndBrackets [

	self validate: '3. 4'
	isFormattedAs:
' 3.
4 '
]

{ #category : #test }
BIBlockExpressionTest >> testSpace [

	self validate: '2' isFormattedAs: ' 2 '
]

{ #category : #test }
BIBlockExpressionTest >> validate: stringInsideBlock isFormattedAs: ExpectedStringInsideBlock [
	self validate: stringInsideBlock isFormattedAs: ExpectedStringInsideBlock with: #emptyDefaultConfiguration
]

{ #category : #test }
BIBlockExpressionTest >> validate: stringInsideBlock isFormattedAs: ExpectedStringInsideBlock with: aConfiguration [
	| expr source |
	expr := self parser parseExpression: self openBracket ,stringInsideBlock,self closeBracket.
	configurationSelector := aConfiguration.
	source := self formatter format: expr.
	self assert: source equals: self openBracket,ExpectedStringInsideBlock,self closeBracket
]
